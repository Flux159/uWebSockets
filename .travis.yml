language: node_js

jobs:
  include:
    - stage: build-linux
      os: linux
      node_js: "node"
    - stage: build-osx
      osx_image: xcode7.3
      os: osx
      node_js: "node"

addons:
  apt:
    packages:
      - gcc
      - g++
      - libssl-dev
      - zlib1g-dev

before_install:
  - "if [ ${TRAVIS_OS_NAME} = 'osx' ]; then brew install --force openssl zlib libuv; fi"
  - "if [ ${TRAVIS_OS_NAME} = 'linux' ]; then sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test && sudo apt-get update && sudo apt-get install -y g++-4.8 && sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 50; fi"

install:
  - "cd nodejs && make && cd .."

# Release to github under version tag
# https://stackoverflow.com/questions/23277391/how-to-publish-to-github-pages-from-travis-ci
script:
- if [[ $PUBLISH_BINARY == true ]]; then 
    node-pre-gyp package; 
  fi

# Cleanup
- cd nodejs && make clean && cd ..

# Make
# upload bindings to github as release
# Same for .appveyor for windows bindings
# setup npm install to download from github instead of just downloading all from npm package

# See this about automated releases from travis as well:
# https://docs.travis-ci.com/user/deployment/npm/
# Essentially want to only release on tags, make sure to tag commit and "git push --tags"
# Note that you only want to release from one of travis and appveyor since the binaries are published to github 
# and loaded dynamically. Can release through appveyor as well, but not as nicely as travis: https://rimdev.io/publishing-to-npm-using-appveyor/ 

# See how this deploys to github from appveyor:
# https://github.com/sass/node-sass/blob/master/appveyor.yml
# This for travis (very similar):
# https://docs.travis-ci.com/user/deployment/releases/
# Then use the npm deploy on tag after deleting 

# I think the only change for npm install is going to be changing the script in package.json
# to download the appropriate package - if it exists - prior to running node-gyp rebuild;
# could make this a shell script or just do it inline
# In binding.gyp there's already a way of finding the correct node platform and version, just need to
# do a check so that it doesn't fail if the platform + version # doesn't exist or something

# I think that this ends up being exclusively changes to the bindings repo then and no changes to
# uWebSockets source. Only thing is I don't know how things are managed when you don't have a monorepo
# and am using submodules

# script: brew install --force openssl libuv && make && make install && make tests && time ./testsBin
